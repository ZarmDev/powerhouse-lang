#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>
#include <unordered_map>

using namespace std;

// AI usage
class Variable {
public:
    enum Type { INT, FLOAT, STRING, UNDEFINED } type;
    int intValue;
    float floatValue;
    string stringValue;

    Variable() : type(UNDEFINED) {}
    Variable(int value) : type(INT), intValue(value) {}
    Variable(float value) : type(FLOAT), floatValue(value) {}
    Variable(string value) : type(STRING), stringValue(value) {}

    string toString() const {
        switch (type) {
        case INT: return to_string(intValue);
        case FLOAT: return to_string(floatValue);
        case STRING: return stringValue;
        default: return "undefined";
        }
    }
};

// State enums
enum class EXPECT { none, variable, method, waitForEndOfLine };
EXPECT expect = EXPECT::none;
enum class VAREXPECT { none, varname, varassignment, varvalue };
VAREXPECT varexpect = VAREXPECT::none;

// Variables
string currWord = "";
string varname = "";
string vartype = "";
string methodname = "";
// AI Usage for unordered map
unordered_map<string, Variable> variables;
//vector<pair<string, int>> intVariables;
//vector<pair<string, float>> floatVariables;
//vector<pair<string, string>> stringVariables;
const int bIMlen = 2;
const string builtInMethods[bIMlen] = { "pr", "prn" };

static void printAllVars() {
    for (auto const& pair : variables) {
        cout << pair.first << " = " << pair.second.toString() << '\n';
    }
}

// varname -> varassignment -> varvalue
// x = 5; -> get the varname (x) then go past the assignment ('=') and then get the varvalue
static bool checkForVariable(string code, int i) {
    if (varexpect == VAREXPECT::varname) {
        // Then, we no longer need to check var name
        if (ch == '=') {
            //cout << currWord << " <- varname\n";
            // If there was a space, remove it in the var name
            if (code.at(i - 1) == ' ') {
                currWord.pop_back();
            }
            varname = currWord;
            currWord = "";
            varexpect = VAREXPECT::varassignment;
            return true;
        }
        currWord += ch;
        return true;
    }
    else if (varexpect == VAREXPECT::varassignment) {
        // If we expect assignment, go past the = sign and find the expected value
        if (ch != ' ') {
            currWord += ch;
            varexpect = VAREXPECT::varvalue;
        }
        return true;
    }
    else if (varexpect == VAREXPECT::varvalue) {
        //cout << ch << " test\n";
        currWord += ch;
        return true;
    }
    return false;
}

// AI Usage
static string getVariable(const string& variableName) {
    if (variables.find(variableName) != variables.end()) {
        return variables[variableName].toString();
    }
    return "undefined";
}

static bool isPrimitiveType(const string& word) {
    return (currWord == "int" || currWord == "str" || currWord == "bool" || currWord == "float");
}

//const char digits[10] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };
//
//// bytes in digits / bytes in one element of the array = total num of elements in array (idk why don't ask me)
//// sizeof(digits) / sizeof(digits[0])
//static bool isNumber(char c) {
//    for (int i = 0; i < sizeof(digits) / sizeof(digits[0]); i++) {
//        if (c == digits[i]) {
//            return true;
//        }
//    }
//    return false;
//}

static bool isNumber(const string& str) {
    return all_of(str.begin(), str.end(), ::isdigit);
}

enum HANDLER { none, quotes, adding, variable };
HANDLER handling = HANDLER::none;

static string handleConcantenation(const string& str) {
    string fullString = "";
    string currString = "";
    for (int i = 0; i < str.length(); i++) {
        if (str.at(i) == '"' || str.at(i) == '\'') {
            // If it's the end of the quotation mark
            if (handling == quotes) {
                fullString += currString;
                handling = none;
                currString = "";
                continue;
            }
            handling = quotes;
            continue;
            // If it's the first character, then it's probably a variable so print it
        }
        else if (i == 0) {
            handling = variable;
        }
        if (handling == quotes) {
            //cout << str.at(i);
            // If it's a special character (\)
            if (str.at(i) == '\\') {
                //cout << "wtf";
                // Then, add that character to the string
                i++;
                if (str.at(i) == 'n') {
                    currString += '\n';
                }
                continue;
            }
            currString += str.at(i);
            continue;
        }
        if (handling == adding) {
            if (str.at(i) != ' ') {
                handling = variable;
            }
        }
        // We can also assume it may be a number here
        if (handling == variable) {
            if (str.at(i) == ' ') {
                handling = none;
                if (isNumber(currString)) {
                    //cout << currString << " \n";
                    fullString += currString;
                }
                else {
                    fullString += getVariable(currString);
                }
                currString = "";
                continue;
            }
            currString += str.at(i);
        }
        if (str.at(i) == '+') {
            handling = adding;
        }
    }
    // If it the concatenation abrubtly ends (which it will), then add the last currString
    // Or as a neat trick just add a space at the end or something to make the loop continue
    if (currString != "") {
        if (handling == HANDLER::variable) {
            if (isNumber(currString)) {
                fullString += currString;
            }
            else {
                fullString += getVariable(currString);
            }
        }
    }
    handling = HANDLER::none;
    return fullString;
}

static void print(string str) {
    cout << handleConcantenation(str);
}

static void println(string str) {
    cout << handleConcantenation(str) << '\n';
}

int main()
{
    try {
        ifstream file("code.txt");
        if (!file.is_open()) {
            cerr << "Failed to open file." << endl;
            return 1;
        }
        string code((istreambuf_iterator<char>(file)), istreambuf_iterator<char>());
        file.close();

        for (int i = 0; i < code.length(); i++) {
            // ## CHECK FOR NEW LINES ##
            if (ch == '\n') {
                if (expect == EXPECT::variable) {
                    // If we had a variable declaration, we can finish up here
                    if (varexpect == VAREXPECT::varvalue) {
                        //cout << vartype << " " << varname << " = " << currWord << '\n';
                        /*if (vartype == "string") {
                            stringVariables.push_back({varname, currWord});
                        } else if(vartype == "int") {
                            intVariables.push_back({ varname, stoi(currWord) });
                        }
                        else if (vartype == "float") {
                            floatVariables.push_back({ varname, stof(currWord) });
                        }*/
                        //cout << "curr " << currWord << '\n';
                        currWord = handleConcantenation(currWord);
                        //cout << "curr " << currWord << '\n';
                        // AI Usage
                        if (vartype == "str") {
                            variables[varname] = Variable(currWord);
                        }
                        else if (vartype == "int") {
                            variables[varname] = Variable(stoi(currWord));
                        }
                        else if (vartype == "float") {
                            variables[varname] = Variable(stof(currWord));
                        }
                        // Remember to reset the variable state variable
                        varexpect = VAREXPECT::none;
                    }
                }
                expect = EXPECT::none;
                currWord = "";
                continue;
            }
            // ## CHECK IF DECLARATION ALREADY KNOWN ##
            if (expect != EXPECT::none) {
                if (expect == EXPECT::waitForEndOfLine) {
                    continue;
                }
                else if (expect == EXPECT::variable) {
                    if (varexpect == VAREXPECT::none) {
                        varexpect = VAREXPECT::varname;
                    }
                    checkForVariable(code, i);
                }
                else if (expect == EXPECT::method) {
                    // ## WHERE METHODS ARE RUN ##
                    if (methodname == "pr") {
                        if (ch == ')') {
                            expect = EXPECT::waitForEndOfLine;
                            // Run the method
                            print(currWord);
                        }
                        else {
                            currWord += ch;
                        }
                    }
                    else if (methodname == "prn") {
                        if (ch == ')') {
                            expect = EXPECT::waitForEndOfLine;
                            // Run the method
                            println(currWord);
                        }
                        else {
                            currWord += ch;
                        }
                    }
                }
                continue;
            }

            // Generally, each line can either be a method call (void), an assignment or a declaration of class, object...
            // We should make a seperate function to parse each type of statement
            if (ch == '(' || ch == ')' || ch == ' ') {
                // Parse the word before the special symbols
                // First check if currWord was a primitive type
                //cout << currWord << '\n';
                // This is a variable call then
                if (isPrimitiveType(currWord)) {
                    expect = EXPECT::variable;
                    vartype = currWord;
                    currWord = "";
                }
                else {
                    // It may be a method call
                    for (int i = 0; i < bIMlen; i++) {
                        if (builtInMethods[i] == currWord) {
                            // Call method function
                            //cout << "Method: " << currWord;
                            methodname = currWord;
                            currWord = "";
                            expect = EXPECT::method;
                        }
                    }
                }
            }
            else {
                currWord += ch;
            }
        }
    }
    catch (const std::exception& e) {
        cout << e.what();
    }
    return 0;

    // Idea: Make an array of all the commands ("binom", "frac") and then the compiler can first split it into tokens and then check the first character of each token
    // ex: charcode = 60;
    // vector<vector<string>> test;
    // test.set(60, "binom")
    // if the target string is not binom but starts with a b, go to the value that binom points to (use linked list because it's cool)

    // Use ImGui Drawlist to render the latex
}