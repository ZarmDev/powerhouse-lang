// GENERATED BY AI MOSTLY

// How ownership works

struct Vec2 {
    x: int,
    y: int,
}

fn move_vec(v: Vec2) {
    // v is now owned by this function
    logn "Vec2 moved: " + str(v.x) + ", " + str(v.y) 
}

fn main() {
    v: Vec2 = { x: 10, y: 20 }
    move_vec(v)
    // v is no longer valid here
}

// Returning ownership

struct Vec2 {
    x: int,
    y: int,
}

fn move_vec(v: Vec2) -> Vec2 {
    // v is now owned by this function
    logn("Vec2 moved: " + str(v.x) + ", " + str(v.y))
    // Return ownership back to the caller
    return v
}

fn main() {
    let mut v = Vec2 { x: 10, y: 20 }
    v = move_vec(v)
    // v is now valid again in main
    logn("Vec2 in main: " + str(v.x) + ", " + str(v.y))
}

// Borrowing
struct Vec2 {
    x: int,
    y: int,
}

fn print_vec(v: &Vec2) {
    // v is borrowed, not owned
    logn("Vec2: " + str(v.x) + ", " + str(v.y))
}

fn main() {
    let v = Vec2 { x: 10, y: 20 }
    print_vec(&v)
    // v is still valid in main
    logn("Vec2 in main: " + str(v.x) + ", " + str(v.y))
}

// IF YOU DON'T CARE AND JUST WANT TO USE THE VARIABLE
// Declare the variable as global
#global x: int = 5
